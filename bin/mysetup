#!/bin/sh

VERSION="0.0.1"
target=$HOME/.mysetup

usage() {
  echo "usage: $0 <command> [<args>]\n"
  echo "Available commands:"
  echo "   tap         Tap config repository"
  echo "   untap       Remove config repo"
  echo "   update      Update system"
  echo "   run         Run playbook"
  echo "   refresh     Update config repo"
  echo "   bootstrap   Run bootstrap"
}

check_git() {
  # check if git installed
  git --version >& /dev/null
  if [ $? != 0 ]; then
    echo "error: git not installed"
    exit 10
  fi
}

check_tap() {
  if [ -d $target/repo ]; then
    tapped=true
  fi
}

check_tap_strict() {
  check_tap
  if [ -z $tapped ]; then
    echo "error: not tapped"
    exit 1
  fi
}

cmd_refresh() {
  check_tap_strict
  cd $target/repo
  git fetch && git pull
}

cmd_update() {
  if [ $cmd_arg ]; then
    ansible_tag="--tag $cmd_arg"
  fi
  ansible-playbook -i $target/hosts $target/repo/setup.yml $ansible_tag -e "target=localhost user=$USER" --ask-sudo-pass
}

cmd_run() {
  ansible-playbook -i $target/hosts $target/repo/setup.yml -e target=localhost
}

cmd_untap() {
  check_tap_strict
  rm -rf $target/repo
}

cmd_bootstrap() {
  check_tap
  if [ -z $tapped ]; then
    echo "error: not tapped, please run 'mysetup tap <url>'"
    exit 1
  fi

  boostrap_path="$target/repo/bootstrap.sh"
  if [ ! -f $boostrap_path ]; then
    echo "error: $boostrap_path not exists"
    exit 1
  fi
  sh $boostrap_path
}

cmd_tap() {
  check_tap
  if [ $tapped ]; then
    echo "error: currently tapped"
    exit 1
  fi

  check_git
  if [ -z $cmd_arg ]; then
    echo "error: specify repository, eq. 'mysetup tap <url>'"
    exit 1
  fi
  echo "Tapping repo: $cmd_arg"

  # cloning repo
  git clone -q $cmd_arg $target/repo

  if [ $? != 0 ]; then
    echo "error: failed to clone repo"
  fi
}

if [ $1 == '--version' ]; then
  echo $VERSION
  exit 0
fi

while getopts v opt; do
  case $opt in
    v) verbose=true
       echo "Running in verbose mode.";;

    *) echo "unknown argument: $opt";;
  esac;
done

if [ ! $1 ]; then
  echo "missing command"
  usage
  exit 1
fi

cmd_arg=$2

case $1 in
  run)
    cmd_run;;
  tap)
    cmd_tap;;
  untap)
    cmd_untap;;
  update)
    cmd_update;;
  refresh)
    cmd_refresh;;
  bootstrap)
    cmd_bootstrap;;
  *)
    echo "bad command: $1"
    usage
    exit 1;;
esac;

